{"version":3,"sources":["components/HelperFunctions/gameFunctions.js","firebase-config.js","assets/maps/beach.jpg","assets/characters/waldo.png","assets/characters/wenda.png","assets/characters/wizard.png","assets/characters/odlaw.png","assets/characters/woof.png","components/subcomponents/gameComponents/CharacterSelect.js","components/subcomponents/gameComponents/CharacterDropdown.js","components/subcomponents/gameComponents/StartGame.js","components/subcomponents/gameComponents/Snackbar.js","components/subcomponents/gameComponents/EndGameMsg.js","components/subcomponents/gameComponents/PostScoreMsg.js","components/pageComponents/Game.js","components/HelperFunctions/leaderboardFunctions.js","components/subcomponents/leaderboardComponents/PlayerList.js","components/subcomponents/leaderboardComponents/SidePanel.js","components/subcomponents/leaderboardComponents/PlayerScore.js","components/pageComponents/Leaderboard.js","components/subcomponents/homeComponents/MapSelection.js","components/subcomponents/homeComponents/LeaderboardDiv.js","assets/maps/carnival.jpg","assets/maps/snow.jpg","assets/maps/space.jpg","components/pageComponents/Home.js","assets/misc/logo.png","components/subcomponents/homeComponents/HomeLogo.js","Routes.js","reportWebVitals.js","index.js"],"names":["adjustPointsArray","pointsArray","bounds","imageRangeX","right","left","imageRangeY","bottom","top","map","point","newX","newY","Math","floor","checkPointsArray","xMin","xMax","yMin","yMax","i","length","checkFoundArray","foundArray","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","CharacterSelect","props","clickHandler","e","a","removeDropdown","name","totalTime","getTotalTime","displayEndMsg","className","onClick","src","imgSrc","alt","CharacterDropdown","characterArray","Waldo","Wenda","Wizard","Odlaw","Woof","characterStrings","xPos","yPos","style","position","character","index","uniqid","StartGame","setStart","Snackbar","holderClass","msg","EndGameMsg","yesHandler","to","useState","playerName","setPlayerName","onChange","target","value","type","placeholder","postScore","Game","location","useLocation","level","state","dropdown","setDropdown","endGameMsg","setEndGameMsg","postScoreMsg","setPostScoreMsg","setFoundArray","startTime","setStartTime","snackbarClass","setSnackbarClass","snackbarMsg","setSnackbarMsg","snackbarHolder","setSnackbarHolder","time","timeStamp","setstartGame","bind","startGame","start","fetchAnswers","answerRef","doc","getDoc","then","data","answer","waldo","wenda","wizard","odlaw","woof","console","log","tempFoundArray","setTimeout","docRef","setDoc","PostScoreMsg","Beach","document","querySelector","getBoundingClientRect","xCenter","clientX","yCenter","clientY","push","createPointsArray","processScores","snapshot","returnArray","forEach","id","sort","sortFunction","b","PlayerList","firstLetter","slice","rest","toUpperCase","scoreList","SidePanel","selectLevel","PlayerScore","Leaderboard","setLevel","setScoreList","fetchScores","getDocs","collection","querySnapshot","newLevel","query","newScoreList","score","MapSelection","mapSrc","mapName","LeaderboardDiv","Home","pathname","Carnival","Snow","Space","HomeLogo","Logo","Routes","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8PAgBMA,EAAoB,SAACC,EAAaC,GACpC,IAAMC,EAAcD,EAAOE,MAAQF,EAAOG,KACpCC,EAAcJ,EAAOK,OAASL,EAAOM,IAQ3C,OAPqBP,EAAYQ,KAAK,SAACC,GACnC,IAAIC,EAAOD,EAAM,GAAKR,EAAOG,KACzBO,EAAOF,EAAM,GAAKR,EAAOM,IAG7B,MAAO,CAFPG,EAAOE,KAAKC,MAAa,IAAPH,EAAcR,GAAe,IAC/CS,EAAOC,KAAKC,MAAa,IAAPF,EAAcN,GAAe,SAU1CS,EAAmB,SAACb,EAAQD,GAKrC,IAJA,IAAMe,EAAOd,EAAO,GACde,EAAOf,EAAO,GACdgB,EAAOhB,EAAO,GACdiB,EAAOjB,EAAO,GACXkB,EAAI,EAAGA,EAAInB,EAAYoB,OAAQD,IACpC,GAAInB,EAAYmB,GAAG,IAAMJ,GAAQf,EAAYmB,GAAG,IAAMH,GAAQhB,EAAYmB,GAAG,IAAMF,GAAQjB,EAAYmB,GAAG,IAAMD,EAC5G,OAAO,EAGf,OAAO,GAMEG,EAAkB,SAACC,GAC5B,IAAK,IAAIH,EAAI,EAAGA,EAAGG,EAAWF,OAAQD,IAClC,IAAsB,IAAlBG,EAAWH,GACX,OAAO,EAGf,OAAO,G,gBCxCLI,EAAMC,YAVW,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAOHC,EAAKC,YAAaT,GClBT,MAA0B,kC,iBCA1B,G,MAAA,IAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,iC,OCuB1BU,EAnBS,SAACC,GAErB,IAAMC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACXH,EAAMI,eAAeJ,EAAMlC,YAAakC,EAAMK,KAAML,EAAM1B,KAD/C,OAEJa,EAAgBa,EAAMZ,cAE3BkB,EAAYN,EAAMO,aAAaL,GACnCF,EAAMQ,cAAcF,IALP,2CAAH,sDASlB,OACI,sBAAKG,UAAU,kBAAkBC,QAAST,EAA1C,UACI,oBAAIQ,UAAU,gBAAd,SAA+BT,EAAMK,OACrC,qBAAKI,UAAU,YAAYE,IAAKX,EAAMY,OAAQC,IAAI,yBC4B/CC,EAnCW,SAACd,GAGvB,IAAMe,EAAiB,CAACC,EAAOC,EAAOC,EAAQC,EAAOC,GAC/CC,EAAmB,CAAC,QAAS,QAAS,SAAU,QAAS,QAC3DC,EAAOtB,EAAMsB,KACbC,EAAOvB,EAAMuB,KAEjB,OACI,qBAAKd,UAAU,oBAAoBe,MAAO,CACtCC,SAAU,WACVpD,IAAI,GAAD,OAAKkD,EAAL,MACHrD,KAAK,GAAD,OAAKoD,EAAL,OAHR,SAKKP,EAAezC,KAAI,SAACoD,EAAWC,GAC5B,OAAK3B,EAAMZ,WAAWuC,GAaX,KAZA,cAAC,EAAD,CACPpB,aAAcP,EAAMO,aACpBH,eAAgBJ,EAAMI,eACtBI,cAAeR,EAAMQ,cACrBpB,WAAYY,EAAMZ,WAClBtB,YAAakC,EAAMlC,YACnBQ,IAAK0B,EAAM1B,IACXsC,OAAQc,EACRrB,KAAMgB,EAAiBM,IAClBC,aCtBVC,EAVG,SAAC7B,GAGf,OACI,qBAAKS,UAAU,iBAAf,SACI,wBAAQA,UAAU,WAAWC,QAASV,EAAM8B,SAA5C,gCCOGC,EAZE,SAAC/B,GAGd,OACI,qBAAKS,UAAWT,EAAMgC,YAAtB,SACI,qBAAKvB,UAAWT,EAAMS,UAAtB,SACI,oBAAIA,UAAU,cAAd,SAA8BT,EAAMiC,WCerCC,EAtBI,SAAClC,GAMhB,OACI,qBAAKS,UAAU,iBAAf,SACI,sBAAKA,UAAU,mBAAf,UACA,qBAAIA,UAAU,aAAd,wBAAwCT,EAAMM,UAA9C,eACA,oBAAIG,UAAU,aAAd,kDACI,sBAAKA,UAAU,eAAf,UACI,wBAAQC,QAVN,WACdV,EAAMmC,WAAWnC,EAAMM,YASiBG,UAAU,qBAAtC,iBACA,cAAC,IAAD,CAAM2B,GAAG,IAAT,SACI,wBAAQ3B,UAAU,mBAAlB,2BCmBTyB,EA/BI,SAAClC,GAEhB,MAAoCqC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,sBAAK9B,UAAU,mBAAf,UACI,qBAAIA,UAAU,aAAd,0BAA0CT,EAAMM,aAChD,qBAAKG,UAAU,cAAf,SACI,uBAAO+B,SAbK,SAACtC,GACrBqC,EAAcrC,EAAEuC,OAAOC,QAYmBA,MAAOJ,EAAY7B,UAAU,YAAYkC,KAAK,OAAOC,YAAY,cAEvG,sBAAKnC,UAAU,eAAf,UACI,cAAC,IAAD,CAAM2B,GAAG,IAAT,SACI,wBAAQ1B,QAbA,WACpBV,EAAM6C,UAAUP,EAAYtC,EAAMM,UAAWN,EAAM1B,MAYLmC,UAAU,qBAA5C,oBAEJ,cAAC,IAAD,CAAM2B,GAAG,IAAT,SACI,wBAAQ3B,UAAU,mBAAlB,6B,SC0JLqC,EAzKF,WAAO,IAAD,IAGTC,EAAWC,cACXC,EAAK,UAAGF,EAASG,aAAZ,aAAG,EAAgBD,MACxB3E,EAAG,UAAGyE,EAASG,aAAZ,aAAG,EAAgB5E,IAI5B,EAAgC+D,mBAAS,MAAzC,mBAAOc,EAAP,KAAiBC,EAAjB,KACA,EAAoCf,mBAAS,MAA7C,mBAAOgB,EAAP,KAAmBC,EAAnB,KACA,EAAwCjB,mBAAS,MAAjD,mBAAOkB,EAAP,KAAqBC,EAArB,KAIA,EAAoCnB,mBAAS,EAAC,GAAO,GAAO,GAAO,GAAO,IAA1E,mBAAOjD,EAAP,KAAmBqE,EAAnB,KACA,EAAkCpB,mBAAS,GAA3C,mBAAOqB,EAAP,KAAkBC,EAAlB,KACA,EAA0CtB,mBAAS,iBAAnD,mBAAOuB,EAAP,KAAsBC,EAAtB,KACA,EAAsCxB,mBAAS,IAA/C,mBAAOyB,EAAP,KAAoBC,EAApB,KACA,EAA4C1B,mBAAS,kBAArD,mBAAO2B,EAAP,KAAuBC,EAAvB,KAaA,GAAkC5B,mBAAS,cAAC,EAAD,CAAWP,SAPrC,SAAC5B,GACd,IAAIgE,EAAOxF,KAAKC,MAAMuB,EAAEiE,WAAa,IACrCR,EAAaO,GACbE,GAAa,OAIwDC,KAAK,MAA9E,qBAAOC,GAAP,MAAkBF,GAAlB,MAEM7D,GAAe,SAACL,GAClB,IAAMqE,EAAQb,EAEd,OADgBhF,KAAKC,MAAuC,KAA/BuB,EAAEiE,UAAY,IAAQI,IAAiB,KAQlEC,GAAY,uCAAG,WAAO9C,EAAWpD,GAAlB,iBAAA6B,EAAA,sEAEPsE,EAAYC,YAAI7E,EAAD,kBAAgBvB,IAFxB,SAGQqG,YAAOF,GAAWG,MAAK,SAACF,GAAD,OAASA,EAAIG,UAH5C,OAGPC,EAHO,YAILpD,EAJK,OAKJ,UALI,OAOJ,UAPI,OASJ,WATI,QAWJ,UAXI,QAaJ,SAbI,iDAMEoD,EAAOC,OANT,gCAQED,EAAOE,OART,iCAUEF,EAAOG,QAVT,iCAYEH,EAAOI,OAZT,iCAcEJ,EAAOK,MAdT,iCAgBE,MAhBF,0DAoBbC,QAAQC,IAAI,sCAAZ,MApBa,0DAAH,wDAyBZjF,GAAc,uCAAG,WAAOtC,EAAa4D,EAAWpD,GAA/B,iBAAA6B,EAAA,sEACEqE,GAAa9C,EAAWpD,GAD1B,UACbwG,EADa,QAELlG,EAAiBkG,EAAQhH,GAFpB,iBAKXwH,EAAiBlG,EALN,KAMPsC,EANO,OAON,UAPM,OAYN,UAZM,QAiBN,WAjBM,QAsBN,UAtBM,QA2BN,SA3BM,+BAQP4D,EAAe,IAAK,EACpB7B,EAAc6B,GACdvB,EAAe,sBAVR,oCAaPuB,EAAe,IAAK,EACpB7B,EAAc6B,GACdvB,EAAe,sBAfR,oCAkBPuB,EAAe,IAAK,EACpB7B,EAAc6B,GACdvB,EAAe,uBApBR,oCAuBPuB,EAAe,IAAK,EACpB7B,EAAc6B,GACdvB,EAAe,sBAzBR,oCA4BPuB,EAAe,IAAK,EACpB7B,EAAc6B,GACdvB,EAAe,qBA9BR,iEAmCfF,EAAiB,iBAnCF,wBAsCfA,EAAiB,kBACjBE,EAAe,sBAvCA,QA0CnBE,EAAkB,mBAClBsB,YAAW,WACPtB,EAAkB,oBACnB,KAGHb,EAAY,MAhDO,4CAAH,0DAmEdP,GAAS,uCAAG,WAAOxC,EAAM6D,EAAM5F,GAAnB,eAAA6B,EAAA,6DACVqF,EAASd,YAAI7E,EAAIvB,EAAK+B,GADZ,SAERoF,YAAOD,EAAQ,CACjBtB,KAAMA,IAHI,2CAAH,0DAOT/B,GAAa,SAAC7B,GAChBgD,EAAc,MACdE,EACI,cAACkC,EAAD,CAAcpF,UAAWA,EAAWhC,IAAKA,EAAKuE,UAAWA,OAI3DrC,GAAgB,SAACF,GACnBgD,EAAc,cAAC,EAAD,CAAYnB,WAAYA,GAAY7D,IAAKA,EAAKgC,UAAWA,MAM3E,OACI,sBAAKG,UAAU,OAAf,UACI,cAAC,EAAD,CAAUuB,YAAagC,EAAgBvD,UAAWmD,EAAe3B,IAAK6B,IACrEQ,GACAjB,EACAE,EACD,qBAAK9C,UAAU,YAAYI,IAAI,MAAMF,IAAKsC,GAAc0C,EAAOjF,QA3ChD,SAACR,GACpB,IAAMpC,EdrImB,SAACoC,GAC9B,IAAInC,EAAS6H,SAASC,cAAc,cAAcC,wBAC9CC,EAAU7F,EAAE8F,QACZC,EAAU/F,EAAEgG,QACZpI,EAAc,CAAC,CAACiI,EAASE,IAM7B,OALAnI,EAAYqI,KAAK,CAACJ,EAAU,GAAIE,EAAU,KAC1CnI,EAAYqI,KAAK,CAACJ,EAAU,GAAIE,EAAU,KAC1CnI,EAAYqI,KAAK,CAACJ,EAAU,GAAIE,EAAU,KAC1CnI,EAAYqI,KAAK,CAACJ,EAAU,GAAIE,EAAU,KACtBpI,EAAkBC,EAAaC,Gc4H3BqI,CAAkBlG,GACtCkD,EAAY,cAAC,EAAD,CACR7C,aAAcA,GAAa8D,KAAK,GAChCjE,eAAgBA,GAAeiE,KAAK,GACpC7D,cAAeA,GAAc6D,KAAK,GAClC/F,IAAKA,EACLc,WAAYA,EACZtB,YAAaA,EACbwD,KAAMpB,EAAE8F,QACRzE,KAAMrB,EAAEgG,cAkCP/C,MCjLAkD,EAAa,uCAAG,WAAOC,GAAP,iBAAAnG,EAAA,6DACrBoG,EAAc,GACd5E,EAAQ,EAFa,SAGnB2E,EAASE,SAAS,SAAC9B,GACrB6B,EAAY5E,GAAS,CACjBtB,KAAMqE,EAAI+B,GACVvC,KAAMQ,EAAIG,OAAOX,MAErBvC,OARqB,cAUzB4E,EAAYG,KAAKC,GAVQ,kBAWlBJ,GAXkB,2CAAH,sDAepBI,EAAe,SAACxG,EAAGyG,GACrB,OAAIzG,EAAE+D,KAAO0C,EAAE1C,KACJ,EAEF/D,EAAE+D,KAAO0C,EAAE1C,MACR,EAGD,GCSA2C,EA1BI,SAAC7G,GAEhB,IAAIiD,EAAQjD,EAAMiD,MACd6D,EAAc7D,EAAM8D,MAAM,EAAE,GAC5BC,EAAO/D,EAAM8D,MAAM,GAKvB,OAHA9D,GADA6D,EAAcA,EAAYG,eACJD,EAIlB,sBAAKvG,UAAU,aAAf,UACI,qBAAIA,UAAU,mBAAd,yBAA2CwC,GAA3C,OACA,oBAAIxC,UAAU,oBACd,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,aAAf,SACI,oBAAIA,UAAU,aAAd,SAA6B,oBAEjC,qBAAKA,UAAU,aAAf,SACI,oBAAIA,UAAU,aAAd,SAA6B,gBAGpCT,EAAMkH,cCJJC,EAjBG,SAACnH,GAIf,OACI,sBAAKS,UAAU,YAAf,UACI,oBAAIA,UAAU,iBAAd,sBACA,sBAAKA,UAAU,mBAAf,UACI,wBAAQC,QAASV,EAAMoH,YAAa/G,KAAK,QAAQI,UAAU,cAA3D,4BACA,wBAAQC,QAASV,EAAMoH,YAAa/G,KAAK,WAAWI,UAAU,cAA9D,+BACA,wBAAQC,QAASV,EAAMoH,YAAa/G,KAAK,OAAOI,UAAU,cAA1D,2BACA,wBAAQC,QAASV,EAAMoH,YAAa/G,KAAK,QAAQI,UAAU,cAA3D,mCCGD4G,EAfK,SAACrH,GAGjB,OACI,sBAAKS,UAAU,cAAf,UACI,qBAAKA,UAAU,aAAf,SACI,oBAAIA,UAAU,aAAd,SAA6BT,EAAMK,SAEvC,qBAAKI,UAAU,aAAf,SACI,oBAAIA,UAAU,aAAd,SAA6BT,EAAMkE,aCoCpCoD,EAxCK,WAGhB,MAA0BjF,mBAAS,IAAnC,mBAAOY,EAAP,KAAcsE,EAAd,KACA,EAAkClF,mBAAS,IAA3C,mBAAO6E,EAAP,KAAkBM,EAAlB,KAIMC,EAAW,uCAAG,WAAOxE,GAAP,eAAA9C,EAAA,+EAEgBuH,YAAQC,YAAW9H,EAAIoD,IAFvC,cAEN2E,EAFM,yBAGLA,GAHK,gCAMZxC,QAAQC,IAAI,sCAAZ,MANY,yDAAH,sDAUX+B,EAAW,uCAAG,WAAOlH,GAAP,mBAAAC,EAAA,6DACZ0H,EAAW3H,EAAEuC,OAAOpC,KACxBkH,EAASM,GAFO,SAGIJ,EAAYI,GAHhB,cAGVC,EAHU,gBAISzB,EAAcyB,GAJvB,OAKhBC,GADIA,EAJY,QAKYzJ,KAAK,SAAC0J,GAC9B,OAAO,cAAC,EAAD,CAAa3H,KAAM2H,EAAM3H,KAAM6D,KAAM8D,EAAM9D,MAAWtC,UAEjE4F,EAAaO,GARG,4CAAH,sDAYjB,OACI,qBAAKtH,UAAU,cAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,cAAC,EAAD,CAAW2G,YAAaA,IACxB,cAAC,EAAD,CAAYF,UAAWA,EAAWjE,MAAOA,UChB1CgF,EAnBM,SAACjI,GAElB,IAAMe,EAAiB,CAACC,EAAOC,EAAOC,EAAQC,EAAOC,GAGrD,OACI,sBAAKX,UAAU,eAAf,UACI,qBAAKA,UAAU,UAAUE,IAAKX,EAAMkI,OAAQrH,IAAKb,EAAMmI,UACvD,sBAAK1H,UAAU,aAAf,UACI,oBAAIA,UAAU,UAAd,SAAyBT,EAAMmI,UAC/B,qBAAK1H,UAAU,YAAf,SACKM,EAAezC,KAAI,SAACoD,GAAe,OAAO,qBAAKf,IAAKe,EAAWjB,UAAU,YAAYI,IAAI,aAAiBe,mBCGhHwG,EAnBQ,WAInB,OACI,sBAAK3H,UAAU,iBAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,oBAAIA,UAAU,iBAAd,gCACA,oBAAIA,UAAU,qBAAd,mDAEJ,qBAAKA,UAAU,oBAAf,SACI,cAAC,IAAD,CAAM2B,GAAG,eAAT,SACI,wBAAQ3B,UAAU,iBAAlB,iCCjBL,MAA0B,qCCA1B,MAA0B,iCCA1B,MAA0B,kCC8D1B4H,EAlDF,WAGT,OACI,sBAAK5H,UAAU,OAAf,UACI,sBAAKA,UAAU,YAAf,UACI,cAAC,IAAD,CAAM2B,GAAI,CAENkG,SAAU,QACVpF,MAAO,CACHD,MAAO0C,EACPrH,IAAK,UALb,SAQI,cAAC,EAAD,CAAc4J,OAAQvC,EAAOwC,QAAQ,sBAEzC,cAAC,IAAD,CAAM/F,GAAI,CACNkG,SAAU,QACVpF,MAAO,CACHD,MAAOsF,EACPjK,IAAK,aAJb,SAOI,cAAC,EAAD,CAAc4J,OAAQK,EAAUJ,QAAQ,yBAE5C,cAAC,IAAD,CAAM/F,GAAI,CACNkG,SAAU,QACVpF,MAAO,CACHD,MAAOuF,EACPlK,IAAK,SAJb,SAOI,cAAC,EAAD,CAAc4J,OAAQM,EAAML,QAAQ,qBAExC,cAAC,IAAD,CAAM/F,GAAI,CACNkG,SAAU,QACVpF,MAAO,CACHD,MAAOwF,EACPnK,IAAK,UAJb,SAOI,cAAC,EAAD,CAAc4J,OAAQO,EAAON,QAAQ,yBAG7C,oBAAI1H,UAAU,SACd,cAAC,EAAD,QCzDG,MAA0B,iCCkB1BiI,EAZE,WAIb,OACI,sBAAKjI,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAOE,IAAKgI,EAAM9H,IAAI,cACrC,qBAAKJ,UAAU,UAAUE,IAAKK,EAAOH,IAAI,oBCatC+H,EAlBA,WAGX,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAMxG,GAAG,IAAT,SACI,cAAC,EAAD,MAEJ,oBAAI3B,UAAU,SACd,eAAC,IAAD,WACI,cAAC,IAAD,CAAOoI,OAAK,EAACC,KAAK,eAAeC,UAAWzB,IAC5C,cAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,QAAQC,UAAWjG,IACrC,cAAC,IAAD,CAAOgG,KAAK,IAAIC,UAAWV,WCR5BW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtE,MAAK,YAAkD,IAA/CuE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9D,SAAS+D,eAAe,SAM1BX,M","file":"static/js/main.bc10bf08.chunk.js","sourcesContent":["//This function is used to create the points array that will be checked against the backend values\n//Basically if any point (including the center) falls between the bounds of the character (backend values), the character will be marked as found\nexport const createPointsArray = (e) => {\n    let bounds = document.querySelector(\".gameLevel\").getBoundingClientRect();\n    let xCenter = e.clientX;\n    let yCenter = e.clientY;\n    let pointsArray = [[xCenter, yCenter]]\n    pointsArray.push([xCenter - 25, yCenter - 25]);\n    pointsArray.push([xCenter + 25, yCenter - 25]);\n    pointsArray.push([xCenter - 25, yCenter + 25]);\n    pointsArray.push([xCenter + 25, yCenter + 25]);\n    let adjustedArray = adjustPointsArray(pointsArray, bounds);\n    return adjustedArray;\n}\n//Adjusts the x and y values of the points in the array to percentage values relative to the actual image; this is to make sure the some point on the image\n//will send the same percentage coordinates to the backend no matter the clients' resolution\nconst adjustPointsArray = (pointsArray, bounds) => {\n    const imageRangeX = bounds.right - bounds.left;\n    const imageRangeY = bounds.bottom - bounds.top;\n    let newPointsArray = pointsArray.map( (point) => {\n        let newX = point[0] - bounds.left;\n        let newY = point[1] - bounds.top;\n        newX = Math.floor(newX * 1000 / imageRangeX) / 1000;\n        newY = Math.floor(newY * 1000 / imageRangeY) / 1000;\n        return [newX, newY];\n    })\n    return newPointsArray;\n}   \n\n\n\n\n//This function is used to do the checking that was described in the first comment above\nexport const checkPointsArray = (bounds, pointsArray) => {\n    const xMin = bounds[0];\n    const xMax = bounds[1];\n    const yMin = bounds[2];\n    const yMax = bounds[3];\n    for (let i = 0; i < pointsArray.length; i++) {\n        if (pointsArray[i][0] >= xMin && pointsArray[i][0] <= xMax && pointsArray[i][1] >= yMin && pointsArray[i][1] <= yMax) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n\n\nexport const checkFoundArray = (foundArray) => {\n    for (let i = 0; i< foundArray.length; i++) {\n        if (foundArray[i] === false) {\n            return false;\n        }\n    }\n    return true;\n}","import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCAzKGScKuo8vYOx8_SD_t1eY7f7Ih2sHc\",\n  authDomain: \"where-s-waldo-a3e82.firebaseapp.com\",\n  projectId: \"where-s-waldo-a3e82\",\n  storageBucket: \"where-s-waldo-a3e82.appspot.com\",\n  messagingSenderId: \"433871016424\",\n  appId: \"1:433871016424:web:a2abf0dacbadaa2398545d\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n\nconst db = getFirestore(app);\n\n//const timestamp = firestore.FieldValue.serverTimestamp();\n\nexport { db };\nexport default app;\n\n","export default __webpack_public_path__ + \"static/media/beach.ad7b21a0.jpg\";","export default __webpack_public_path__ + \"static/media/waldo.9b18e625.png\";","export default __webpack_public_path__ + \"static/media/wenda.ed5bb1fc.png\";","export default __webpack_public_path__ + \"static/media/wizard.07d1ce62.png\";","export default __webpack_public_path__ + \"static/media/odlaw.7e103015.png\";","export default __webpack_public_path__ + \"static/media/woof.381517b8.png\";","import \"../../styles.css\";\nimport { checkFoundArray } from \"../../HelperFunctions/gameFunctions\";\n\n\nconst CharacterSelect = (props) => {\n\n    const clickHandler = async (e) => {\n        await props.removeDropdown(props.pointsArray, props.name, props.map);\n        let status = checkFoundArray(props.foundArray);\n        if (status) {\n            let totalTime = props.getTotalTime(e);\n            props.displayEndMsg(totalTime);\n        }\n    }\n\n    return (\n        <div className=\"characterSelect\" onClick={clickHandler}>\n            <h3 className=\"characterName\">{props.name}</h3>\n            <img className=\"legendImg\" src={props.imgSrc} alt=\"character legend\" />\n        </div>\n    )\n}\n\nexport default CharacterSelect;","import uniqid from \"uniqid\";\nimport \"../../styles.css\";\nimport Waldo from \"../../../assets/characters/waldo.png\";\nimport Wenda from \"../../../assets/characters/wenda.png\";\nimport Wizard from \"../../../assets/characters/wizard.png\";\nimport Odlaw from \"../../../assets/characters/odlaw.png\";\nimport Woof from \"../../../assets/characters/woof.png\";\nimport CharacterSelect from \"./CharacterSelect\";\n\n\n//Want to pass a function for checking with backend through props; also want to pass a boolean array for which characters have not been found through props\nconst CharacterDropdown = (props) => {\n\n    //Drop down will show names and sprites for the characters that have not been found\n    const characterArray = [Waldo, Wenda, Wizard, Odlaw, Woof];\n    const characterStrings = [\"Waldo\", \"Wenda\", \"Wizard\", \"Odlaw\", \"Woof\"];\n    let xPos = props.xPos;\n    let yPos = props.yPos;\n\n    return (\n        <div className=\"characterDropdown\" style={{\n            position: \"absolute\",\n            top: `${yPos}px`,\n            left: `${xPos}px`\n        }}>\n            {characterArray.map((character, index) => {\n                if (!props.foundArray[index]) {\n                    return <CharacterSelect \n                    getTotalTime={props.getTotalTime} \n                    removeDropdown={props.removeDropdown} \n                    displayEndMsg={props.displayEndMsg}\n                    foundArray={props.foundArray} \n                    pointsArray={props.pointsArray} \n                    map={props.map} \n                    imgSrc={character} \n                    name={characterStrings[index]} \n                    key={uniqid()} />\n                }\n                else {\n                    return null;\n                }\n            })}\n        </div>\n    )\n}\n\nexport default CharacterDropdown;\n","\n\n\n\nconst StartGame = (props) => {\n\n\n    return (\n        <div className=\"darkBackground\" >\n            <button className=\"startBtn\" onClick={props.setStart} >Click To Begin!</button>\n        </div>\n    )\n}\n\nexport default StartGame;","\n\n\n\nconst Snackbar = (props) => {\n\n\n    return (\n        <div className={props.holderClass}>\n            <div className={props.className} >\n                <h3 className=\"snackbarMsg\" >{props.msg}</h3>\n            </div>\n        </div>   \n    )\n}\n\nexport default Snackbar;","import { Link } from \"react-router-dom\"\n\n\nconst EndGameMsg = (props) => {\n\n    const handleYes = () => {\n        props.yesHandler(props.totalTime);\n    }\n\n    return (\n        <div className=\"darkBackground\">\n            <div className=\"endGameMsgHolder\" >\n            <h3 className=\"endGameMsg\" >You Won in {props.totalTime} seconds!</h3>\n            <h4 className=\"endGameMsg\" >Would you like to upload your score?</h4>\n                <div className=\"endBtnHolder\" >\n                    <button onClick={handleYes} className=\"endBtnGreen endBtn\">Yes</button>\n                    <Link to=\"/\">\n                        <button className=\"endBtnRed endBtn\">No</button>\n                    </Link>\n                </div>\n            </div>\n        </div>   \n    );\n}\n\nexport default EndGameMsg;","import { Link } from \"react-router-dom\"\nimport { useState } from \"react\";\n\n\n\nconst EndGameMsg = (props) => {\n\n    const [playerName, setPlayerName] = useState(\"\");\n\n    const onChangeHandler = (e) => {\n        setPlayerName(e.target.value);\n    }\n\n    const onSubmitHandler = () => {\n        props.postScore(playerName, props.totalTime, props.map)\n        \n    }\n\n    return (\n        <div className=\"endGameMsgHolder\" >\n            <h3 className=\"endGameMsg\" >Finished in: {props.totalTime}</h3>\n            <div className=\"inputHolder\" >\n                <input onChange={onChangeHandler} value={playerName} className=\"nameInput\" type=\"text\" placeholder=\"Name...\" />\n            </div>\n            <div className=\"endBtnHolder\" >\n                <Link to=\"/\" >\n                    <button onClick={onSubmitHandler} className=\"endBtnGreen endBtn\">Done</button>\n                </Link>\n                <Link to=\"/\">\n                    <button className=\"endBtnRed endBtn\">Cancel</button>\n                </Link>\n            </div>\n        </div> \n    );\n}\n\nexport default EndGameMsg;","import { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { createPointsArray, checkPointsArray } from \"../HelperFunctions/gameFunctions\";\nimport { getDoc, setDoc, doc } from \"firebase/firestore\";\nimport { db } from \"../../firebase-config.js\";\nimport Beach from \"../../assets/maps/beach.jpg\";\nimport CharacterDropdown from \"../subcomponents/gameComponents/CharacterDropdown\";\nimport StartGame from \"../subcomponents/gameComponents/StartGame\";\nimport Snackbar from \"../subcomponents/gameComponents/Snackbar\";\nimport EndGameMsg from \"../subcomponents/gameComponents/EndGameMsg\";\nimport PostScoreMsg from \"../subcomponents/gameComponents/PostScoreMsg\";\n\n\n\nconst Game = () => {\n\n    //useLocation is used to store the map imgSrc and map name in so that the correct level will be displayed\n    const location = useLocation();\n    const level = location.state?.level;\n    const map = location.state?.map;\n\n\n    //These hooks are used in the return statement to append a component or to append null (e.g. StartGame or Snackbar; dropdown is set below)\n    const [dropdown, setDropdown] = useState(null);\n    const [endGameMsg, setEndGameMsg] = useState(null);\n    const [postScoreMsg, setPostScoreMsg] = useState(null);\n    \n\n    //These hooks are used to store important variables\n    const [foundArray, setFoundArray] = useState([false, false, false, false, false]);\n    const [startTime, setStartTime] = useState(0);\n    const [snackbarClass, setSnackbarClass] = useState(\"snackbarFound\");\n    const [snackbarMsg, setSnackbarMsg] = useState(\"\");\n    const [snackbarHolder, setSnackbarHolder] = useState(\"snackbarHidden\");\n\n\n\n\n    //Functions deal with calculating how long it took to find all characters\n    const setStart = (e) => {\n        let time = Math.floor(e.timeStamp) / 1000;\n        setStartTime(time)\n        setstartGame(null);\n    }\n\n    //Hook declared after setStart function because setStart is used in the hook\n    const [startGame, setstartGame] = useState(<StartGame setStart={setStart.bind(this)}/>);\n\n    const getTotalTime = (e) => {\n        const start = startTime;\n        let totalTime = Math.floor(((e.timeStamp / 1000) - start) * 1000) / 1000;\n        return totalTime;\n    }\n\n\n\n\n    //Function for dealing with async get request\n    const fetchAnswers = async (character, map) => {\n        try {\n            const answerRef = doc(db, `answers/${map}`);\n            const answer = await getDoc(answerRef).then((doc) => doc.data());\n            switch (character) {\n                case \"Waldo\" :\n                    return answer.waldo;\n                case \"Wenda\" :\n                    return answer.wenda;\n                case \"Wizard\" :\n                    return answer.wizard;\n                case \"Odlaw\" :\n                    return answer.odlaw;\n                case \"Woof\" :\n                    return answer.woof;\n                default :\n                    return null;\n            }\n        }\n        catch(error) {\n            console.log(\"A weird error occured. Get it away!\", error);\n        }\n    }\n\n    //Functions that deal with the dropdown list of characters\n    const removeDropdown = async (pointsArray, character, map) => {\n        const answer = await fetchAnswers(character, map);\n        const found = checkPointsArray(answer, pointsArray);\n\n        if (found) {\n            let tempFoundArray = foundArray;\n            switch (character) {\n                case \"Waldo\" :\n                    tempFoundArray[0] = true;\n                    setFoundArray(tempFoundArray);\n                    setSnackbarMsg(\"You found Waldo!!!\")\n                    break;\n                case \"Wenda\" :\n                    tempFoundArray[1] = true;\n                    setFoundArray(tempFoundArray);\n                    setSnackbarMsg(\"You found Wenda!!!\")\n                    break;\n                case \"Wizard\" :\n                    tempFoundArray[2] = true;\n                    setFoundArray(tempFoundArray);\n                    setSnackbarMsg(\"You found Wizard!!!\")\n                    break;\n                case \"Odlaw\" :\n                    tempFoundArray[3] = true;\n                    setFoundArray(tempFoundArray);\n                    setSnackbarMsg(\"You found Odlaw!!!\")\n                    break;\n                case \"Woof\" :\n                    tempFoundArray[4] = true;\n                    setFoundArray(tempFoundArray);\n                    setSnackbarMsg(\"You found Woof!!!\")\n                    break;\n                default :\n                    break;\n            }\n            setSnackbarClass(\"snackbarFound\");\n        }\n        else{\n            setSnackbarClass(\"snackbarMissed\");\n            setSnackbarMsg(\"Missed. Try again.\")\n        }\n\n        setSnackbarHolder(\"snackbarShowing\");\n        setTimeout(() => {\n            setSnackbarHolder(\"snackbarHidden\");\n        }, 2000);\n\n        \n        setDropdown(null);\n    }\n\n    const appendDropdown = (e) => {\n        const pointsArray = createPointsArray(e);\n        setDropdown(<CharacterDropdown \n            getTotalTime={getTotalTime.bind(this)} \n            removeDropdown={removeDropdown.bind(this)} \n            displayEndMsg={displayEndMsg.bind(this)}\n            map={map} \n            foundArray={foundArray} \n            pointsArray={pointsArray}\n            xPos={e.clientX}  \n            yPos={e.clientY} />)\n    }\n\n\n\n\n    const postScore = async (name, time, map) => {\n        let docRef = doc(db, map, name);\n        await setDoc(docRef, {\n            time: time\n        });\n    }\n\n    const yesHandler = (totalTime) => {\n        setEndGameMsg(null);\n        setPostScoreMsg(\n            <PostScoreMsg totalTime={totalTime} map={map} postScore={postScore} />\n        );\n    }\n\n    const displayEndMsg = (totalTime) => {\n        setEndGameMsg(<EndGameMsg yesHandler={yesHandler} map={map} totalTime={totalTime} />)\n    }\n\n\n\n\n    return (\n        <div className=\"game\" >\n            <Snackbar holderClass={snackbarHolder} className={snackbarClass} msg={snackbarMsg} />\n            {startGame}\n            {endGameMsg}\n            {postScoreMsg}\n            <img className=\"gameLevel\" alt=\"Map\" src={level ? level:Beach} onClick={appendDropdown}/> \n            {dropdown}\n        </div>\n    )//The ternary statement used in the src attribute is there so that if someone routed to /Game without clicking a MapSelection, the defaul level will be level 1\n}\n\nexport default Game;\n","//Function to take a firestore snapshot as an input and return an array of score objects (each with a name att. and time att.)\nexport const processScores = async (snapshot) => {\n    let returnArray = [];\n    let index = 0;\n    await snapshot.forEach( (doc) => {\n        returnArray[index] = {\n            name: doc.id,\n            time: doc.data().time\n        }\n        index++;\n    })\n    returnArray.sort(sortFunction);\n    return returnArray;\n}\n\n//Sorts the array by time completed\nconst sortFunction = (a, b) => {\n    if (a.time > b.time) {\n        return 1;\n    }\n    else if (a.time < b.time) {\n        return -1\n    }\n    else {\n        return 0;\n    }\n}","\n\n\n\n\n\n\nconst PlayerList = (props) => {\n\n    let level = props.level;\n    let firstLetter = level.slice(0,1);\n    let rest = level.slice(1);\n    firstLetter = firstLetter.toUpperCase();\n    level = firstLetter + rest;\n\n\n    return (\n        <div className=\"playerList\" >\n            <h2 className=\"leaderboardTitle\" >{`Map: ${level}`} </h2>\n            <hr className=\"leaderboardLine\" />\n            <div className=\"playerScore\" >\n                <div className=\"legendName\" >\n                    <h4 className=\"scoreEntry\" >{\"Player Name: \"}</h4>\n                </div>\n                <div className=\"legendTime\" >\n                    <h4 className=\"scoreEntry\" >{\"Time: \"}</h4>\n                </div>\n            </div>\n            {props.scoreList}\n        </div>\n    )\n}\n\nexport default PlayerList;\n\n//Need to add the legend at the top of the leaderboard and then implement this functionality to the other maps as well!!!","\n\n\n\n\n\n\nconst SidePanel = (props) => {\n\n\n\n    return (\n        <div className=\"sidePanel\" >\n            <h4 className=\"sidePanelTitle\">Levels: </h4>\n            <div className=\"sidePanelContent\" >\n                <button onClick={props.selectLevel} name=\"beach\" className=\"levelSelect\" >Level 1: Beach</button>\n                <button onClick={props.selectLevel} name=\"carnival\" className=\"levelSelect\" >Level 2: Carnival</button>\n                <button onClick={props.selectLevel} name=\"snow\" className=\"levelSelect\" >Level 3: Snow</button>\n                <button onClick={props.selectLevel} name=\"space\" className=\"levelSelect\" >Level 4: Space</button>\n            </div>\n        </div>\n    )\n}\n\nexport default SidePanel;","\n\n\n\n\n\nconst PlayerScore = (props) => {\n\n\n    return (\n        <div className=\"playerScore\" >\n            <div className=\"playerName\" >\n                <h4 className=\"scoreEntry\" >{props.name}</h4>\n            </div>\n            <div className=\"playerTime\" >\n                <h4 className=\"scoreEntry\" >{props.time}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default PlayerScore;","import { useState } from \"react\";\nimport uniqid from \"uniqid\";\nimport { getDocs, collection } from \"firebase/firestore\";\nimport { db } from \"../../firebase-config.js\";\nimport { processScores } from \"../HelperFunctions/leaderboardFunctions\";\nimport PlayerList from \"../subcomponents/leaderboardComponents/PlayerList\";\nimport SidePanel from \"../subcomponents/leaderboardComponents/SidePanel\";\nimport PlayerScore from \"../subcomponents/leaderboardComponents/PlayerScore\";\n\n\n\nconst Leaderboard = () => {\n\n    //This hook is used to display the PlayerList component; this component depends on what the user clicks on the SidePanel so it will be set after that first click\n    const [level, setLevel] = useState(\"\");\n    const [scoreList, setScoreList] = useState([]);\n\n\n\n    const fetchScores = async (level) => {\n        try {\n            const querySnapshot = await getDocs(collection(db, level));\n            return querySnapshot;\n        }\n        catch (error) {\n            console.log(\"A weird error occured. Get it away!\", error);\n        }\n    }\n\n    const selectLevel = async (e) => {\n        let newLevel = e.target.name;\n        setLevel(newLevel);\n        const query = await fetchScores(newLevel);\n        let newScoreList = await processScores(query);\n        newScoreList = newScoreList.map( (score) => {\n            return <PlayerScore name={score.name} time={score.time} key={uniqid()} />\n        })\n        setScoreList(newScoreList);\n    }\n\n\n    return (\n        <div className=\"leaderboard\" >\n            <div className=\"leaderboardContent\" >\n                <SidePanel selectLevel={selectLevel} />\n                <PlayerList scoreList={scoreList} level={level} />\n            </div>\n        </div>\n    )\n}\n\nexport default Leaderboard;","import uniqid from \"uniqid\";\nimport \"../../styles.css\";\nimport Waldo from \"../../../assets/characters/waldo.png\";\nimport Wenda from \"../../../assets/characters/wenda.png\";\nimport Wizard from \"../../../assets/characters/wizard.png\";\nimport Odlaw from \"../../../assets/characters/odlaw.png\";\nimport Woof from \"../../../assets/characters/woof.png\";\n\n\n\nconst MapSelection = (props) => {\n    //All maps include every character, so every character will be displayed in the mapLegend div of every map\n    const characterArray = [Waldo, Wenda, Wizard, Odlaw, Woof];\n\n\n    return (\n        <div className=\"mapSelection\" >\n            <img className=\"cardImg\" src={props.mapSrc} alt={props.mapName} />\n            <div className=\"mapDetails\">\n                <h3 className=\"mapName\">{props.mapName}</h3>\n                <div className=\"mapLegend\">\n                    {characterArray.map((character) => {return <img src={character} className=\"legendImg\" alt=\"character\" key={uniqid()}/>})}\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default MapSelection;\n","import { Link } from \"react-router-dom\";\nimport \"../../styles.css\";\n\n\n\nconst LeaderboardDiv = () => {\n\n\n\n    return (\n        <div className=\"leaderboardDiv\" >\n            <div className=\"leaderboardMsgDiv\">\n                <h1 className=\"leaderboardMsg\">Think you're fast?</h1>\n                <h2 className=\"leaderboardCaption\">Check out the leaderboard and see!</h2>\n            </div>\n            <div className=\"leaderbaordBtnDiv\">\n                <Link to=\"/leaderboard\">\n                    <button className=\"leaderboardBtn\">Leaderboard</button>   \n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default LeaderboardDiv;","export default __webpack_public_path__ + \"static/media/carnival.8e82101b.jpg\";","export default __webpack_public_path__ + \"static/media/snow.8536828c.jpg\";","export default __webpack_public_path__ + \"static/media/space.88755365.jpg\";","import MapSelection from \"../subcomponents/homeComponents/MapSelection\";\nimport LeaderboardDiv from \"../subcomponents/homeComponents/LeaderboardDiv\";\nimport Beach from \"../../assets/maps/beach.jpg\";\nimport Carnival from \"../../assets/maps/carnival.jpg\";\nimport Snow from \"../../assets/maps/snow.jpg\";\nimport Space from \"../../assets/maps/space.jpg\";\nimport { Link } from \"react-router-dom\";\n\n\n\n\n\nconst Home = () => {\n\n\n    return (\n        <div className=\"home\">\n            <div className=\"mapSelect\" >\n                <Link to={{\n                    //The \"to\" attribute for the link tag is used to store the level image in order to update the image source of the /Game page\n                    pathname: \"/Game\",\n                    state: {\n                        level: Beach,\n                        map: \"beach\"\n                    }\n                }}>\n                    <MapSelection mapSrc={Beach} mapName=\"Level 1:  Beach\" />\n                </Link>\n                <Link to={{\n                    pathname: \"/Game\",\n                    state: {\n                        level: Carnival,\n                        map: \"carnival\"\n                    }\n                }}>\n                    <MapSelection mapSrc={Carnival} mapName=\"Level 2:  Carnival\" />\n                </Link>\n                <Link to={{\n                    pathname: \"/Game\",\n                    state: {\n                        level: Snow,\n                        map: \"snow\"\n                    }\n                }}>\n                    <MapSelection mapSrc={Snow} mapName=\"Level 3:  Snow\" />\n                </Link>\n                <Link to={{\n                    pathname: \"/Game\",\n                    state: {\n                        level: Space,\n                        map: \"space\"\n                    }\n                }}>\n                    <MapSelection mapSrc={Space} mapName=\"Level 4:  Space\" />\n                </Link>\n            </div>\n            <hr className=\"line\" />\n            <LeaderboardDiv />\n        </div>\n    )\n}\n\nexport default Home;","export default __webpack_public_path__ + \"static/media/logo.74825e08.png\";","import Logo from \"../../../assets/misc/logo.png\";\nimport Waldo from  \"../../../assets/characters/waldo.png\";\nimport \"../../styles.css\";\n\n\n\nconst HomeLogo = () => {\n\n\n\n    return (\n        <div className=\"homeLogo\" >\n            <img className=\"logo\" src={Logo} alt=\"Page logo\" />\n            <img className=\"logoImg\" src={Waldo} alt=\"Page mascot\" />\n        </div>\n    )\n}\n\nexport default HomeLogo;","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport Game from \"./components/pageComponents/Game\";\nimport Leaderboard from \"./components/pageComponents/Leaderboard\";\nimport Home from \"./components/pageComponents/Home\";\nimport HomeLogo from \"./components/subcomponents/homeComponents/HomeLogo\";\nimport { Link } from \"react-router-dom\";\nimport \"./index.css\";\n\nconst Routes = () => {\n\n\n    return (\n        <Router>\n            <Link to=\"/\">\n                <HomeLogo />\n            </Link>\n            <hr className=\"line\"/>\n            <Switch>\n                <Route exact path=\"/leaderboard\" component={Leaderboard} />\n                <Route exact path=\"/Game\" component={Game} />\n                <Route path=\"/\" component={Home} />\n            </Switch>\n        </Router>\n    )\n}\n\nexport default Routes;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}